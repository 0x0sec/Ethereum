{
  "contractName": "ContractName",
  "abi": [
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "fallback"
    }
  ],
  "bytecode": "0x6080604052348015600f57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550603e80605d6000396000f3fe6080604052348015600f57600080fd5b5000fea165627a7a723058203ced04155fd11d75cd5812af9e460fd5217b0e07505ce976f323c7ffa09f98cd0029",
  "deployedBytecode": "0x6080604052348015600f57600080fd5b5000fea165627a7a723058203ced04155fd11d75cd5812af9e460fd5217b0e07505ce976f323c7ffa09f98cd0029",
  "sourceMap": "27:349:1:-;;;86:58;8:9:-1;5:2;;;30:1;27;20:12;5:2;86:58:1;126:10;118:5;;:18;;;;;;;;;;;;;;;;;;27:349;;;;;;",
  "deployedSourceMap": "27:349:1:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;27:349:1;",
  "source": "pragma solidity ^0.5.0;\r\n\r\ncontract ContractName {\r\n    address private Owner;\r\n\r\n    constructor() public {\r\n        Owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n      * @dev Fallback function, for if a function is\r\n      *     called on the contract, that dose not exist.\r\n      * @notice With mistaken funds the contract... ~TODO~\r\n      */\r\n    function() external {\r\n\r\n    }\r\n}",
  "sourcePath": "C:/Users/Veronica Coutts/Desktop/Desktop/Work/Ethereum/Educational/ContractFramework/contracts/ContractName.sol",
  "ast": {
    "absolutePath": "/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ethereum/Educational/ContractFramework/contracts/ContractName.sol",
    "exportedSymbols": {
      "ContractName": [
        35
      ]
    },
    "id": 36,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 19,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:1"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 35,
        "linearizedBaseContracts": [
          35
        ],
        "name": "ContractName",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 21,
            "name": "Owner",
            "nodeType": "VariableDeclaration",
            "scope": 35,
            "src": "56:21:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 20,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "56:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "body": {
              "id": 29,
              "nodeType": "Block",
              "src": "107:37:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 27,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 24,
                      "name": "Owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 21,
                      "src": "118:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 25,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 107,
                        "src": "126:3:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 26,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "126:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "118:18:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 28,
                  "nodeType": "ExpressionStatement",
                  "src": "118:18:1"
                }
              ]
            },
            "documentation": null,
            "id": 30,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 22,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "97:2:1"
            },
            "returnParameters": {
              "id": 23,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "107:0:1"
            },
            "scope": 35,
            "src": "86:58:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 33,
              "nodeType": "Block",
              "src": "363:10:1",
              "statements": []
            },
            "documentation": "@dev Fallback function, for if a function is\r\n    called on the contract, that dose not exist.\r\n@notice With mistaken funds the contract... ~TODO~\r",
            "id": 34,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 31,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "351:2:1"
            },
            "returnParameters": {
              "id": 32,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "363:0:1"
            },
            "scope": 35,
            "src": "343:30:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 36,
        "src": "27:349:1"
      }
    ],
    "src": "0:376:1"
  },
  "legacyAST": {
    "absolutePath": "/C/Users/Veronica Coutts/Desktop/Desktop/Work/Ethereum/Educational/ContractFramework/contracts/ContractName.sol",
    "exportedSymbols": {
      "ContractName": [
        35
      ]
    },
    "id": 36,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 19,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:1"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 35,
        "linearizedBaseContracts": [
          35
        ],
        "name": "ContractName",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 21,
            "name": "Owner",
            "nodeType": "VariableDeclaration",
            "scope": 35,
            "src": "56:21:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 20,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "56:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "body": {
              "id": 29,
              "nodeType": "Block",
              "src": "107:37:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 27,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 24,
                      "name": "Owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 21,
                      "src": "118:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 25,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 107,
                        "src": "126:3:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 26,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "126:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "118:18:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 28,
                  "nodeType": "ExpressionStatement",
                  "src": "118:18:1"
                }
              ]
            },
            "documentation": null,
            "id": 30,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 22,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "97:2:1"
            },
            "returnParameters": {
              "id": 23,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "107:0:1"
            },
            "scope": 35,
            "src": "86:58:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 33,
              "nodeType": "Block",
              "src": "363:10:1",
              "statements": []
            },
            "documentation": "@dev Fallback function, for if a function is\r\n    called on the contract, that dose not exist.\r\n@notice With mistaken funds the contract... ~TODO~\r",
            "id": 34,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 31,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "351:2:1"
            },
            "returnParameters": {
              "id": 32,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "363:0:1"
            },
            "scope": 35,
            "src": "343:30:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 36,
        "src": "27:349:1"
      }
    ],
    "src": "0:376:1"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.1",
  "updatedAt": "2019-01-18T20:21:48.749Z",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}